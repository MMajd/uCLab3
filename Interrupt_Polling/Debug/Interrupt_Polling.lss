
Interrupt_Polling.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000002a6  0000033a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800102  00800102  0000033c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000036c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000003a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009a8  00000000  00000000  00000400  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007ac  00000000  00000000  00000da8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004c8  00000000  00000000  00001554  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  00001a1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000406  00000000  00000000  00001adc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000041b  00000000  00000000  00001ee2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  000022fd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 08 01 	jmp	0x210	; 0x210 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ea       	ldi	r30, 0xA6	; 166
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 30       	cpi	r26, 0x03	; 3
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 70 00 	call	0xe0	; 0xe0 <main>
  9e:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <adc_init>:
	ADCSRA |= (1<<ADSC);

	// wait for conversion to complete, ADSC becomes ’0? again, till then, run loop continuously
	while(ADCSRA & (1<<ADSC));
	return ADC;
}
  a6:	81 11       	cpse	r24, r1
  a8:	04 c0       	rjmp	.+8      	; 0xb2 <adc_init+0xc>
  aa:	80 e6       	ldi	r24, 0x60	; 96
  ac:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
  b0:	03 c0       	rjmp	.+6      	; 0xb8 <adc_init+0x12>
  b2:	80 e4       	ldi	r24, 0x40	; 64
  b4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
  b8:	83 e8       	ldi	r24, 0x83	; 131
  ba:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  be:	08 95       	ret

000000c0 <adc_read_8_bit>:

unsigned char adc_read_8_bit(unsigned char ch)
{
	// select the corresponding channel 0~7
	ADMUX |= ch;
  c0:	ec e7       	ldi	r30, 0x7C	; 124
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	90 81       	ld	r25, Z
  c6:	89 2b       	or	r24, r25
  c8:	80 83       	st	Z, r24

	// start single convertion, by writing ’1? to ADSC
	ADCSRA |= (1<<ADSC);
  ca:	ea e7       	ldi	r30, 0x7A	; 122
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	80 64       	ori	r24, 0x40	; 64
  d2:	80 83       	st	Z, r24

	// wait for conversion to complete, ADSC becomes ’0? again, till then, run loop continuously
	while(ADCSRA & (1<<ADSC));
  d4:	80 81       	ld	r24, Z
  d6:	86 fd       	sbrc	r24, 6
  d8:	fd cf       	rjmp	.-6      	; 0xd4 <adc_read_8_bit+0x14>
	return ADCH;
  da:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
  de:	08 95       	ret

000000e0 <main>:
unsigned char adc_r_8 = 0;

int main(void)
{
	//set all pins in port b to output
	OUTPUT_PORT(DDRB); 
  e0:	8f ef       	ldi	r24, 0xFF	; 255
  e2:	84 b9       	out	0x04, r24	; 4
			
	//input pin 
	RESET_BIT(DDRD, PORTD4);
  e4:	54 98       	cbi	0x0a, 4	; 10

	//choosing one mode of interrupts int pins 4 modes 
	//Low level for INT0
	//portd2
	RESET_BIT(EICRA, ISC00);
  e6:	e9 e6       	ldi	r30, 0x69	; 105
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 81       	ld	r24, Z
  ec:	8e 7f       	andi	r24, 0xFE	; 254
  ee:	80 83       	st	Z, r24
	RESET_BIT(EICRA, ISC01); 
  f0:	80 81       	ld	r24, Z
  f2:	8d 7f       	andi	r24, 0xFD	; 253
  f4:	80 83       	st	Z, r24

	//enabling interrupt request and global interrupt flag 
	SET_BIT(EIMSK, INT0);
  f6:	e8 9a       	sbi	0x1d, 0	; 29
	sei(); 
  f8:	78 94       	sei

	adc_init(0);
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	0e 94 53 00 	call	0xa6	; 0xa6 <adc_init>

	int leds = 0;
	int counter = 0; 
 100:	c0 e0       	ldi	r28, 0x00	; 0
 102:	d0 e0       	ldi	r29, 0x00	; 0
	SET_BIT(EIMSK, INT0);
	sei(); 

	adc_init(0);

	int leds = 0;
 104:	00 e0       	ldi	r16, 0x00	; 0
 106:	10 e0       	ldi	r17, 0x00	; 0
		else if(mode_flag == MODE_TWO) {
			if(counter < 0) {
				leds = 0; 
				counter = 8;
			}
			SET_BIT(leds, counter--);
 108:	cc 24       	eor	r12, r12
 10a:	c3 94       	inc	r12
 10c:	d1 2c       	mov	r13, r1
			_delay_ms(500); 
		}
		else if(mode_flag == MODE_TWO) {
			if(counter < 0) {
				leds = 0; 
				counter = 8;
 10e:	68 94       	set
 110:	66 24       	eor	r6, r6
 112:	63 f8       	bld	r6, 3
 114:	71 2c       	mov	r7, r1
			PORTB = leds; 
			_delay_ms(500); 
		}
		else if(mode_flag == MODE_TWO) {
			if(counter < 0) {
				leds = 0; 
 116:	a1 2c       	mov	r10, r1
 118:	b1 2c       	mov	r11, r1
		}

		if(mode_flag == MODE_ONE) {
			if(counter > 7) {
				leds = 0;
				counter = -1;
 11a:	88 24       	eor	r8, r8
 11c:	8a 94       	dec	r8
 11e:	99 24       	eor	r9, r9
 120:	9a 94       	dec	r9
		//PIND4 here is active low 
		if(CHK_PIN_LOW(PIND, PIND4)) {
			if(mode_flag < MODE_THREE) {
				// toggle the mode from mode 2 to 1, or vise versa
				if(mode_flag == MODE_ONE)  { 
					mode_flag = MODE_TWO;
 122:	68 94       	set
 124:	ee 24       	eor	r14, r14
 126:	e1 f8       	bld	r14, 1
 128:	f1 2c       	mov	r15, r1
	unsigned char adc_r_8 = 0;

    while (1) 
    {
		//PIND4 here is active low 
		if(CHK_PIN_LOW(PIND, PIND4)) {
 12a:	4c 99       	sbic	0x09, 4	; 9
 12c:	1c c0       	rjmp	.+56     	; 0x166 <main+0x86>
			if(mode_flag < MODE_THREE) {
 12e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 132:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 136:	83 30       	cpi	r24, 0x03	; 3
 138:	91 05       	cpc	r25, r1
 13a:	84 f4       	brge	.+32     	; 0x15c <main+0x7c>
				// toggle the mode from mode 2 to 1, or vise versa
				if(mode_flag == MODE_ONE)  { 
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	49 f4       	brne	.+18     	; 0x152 <main+0x72>
					mode_flag = MODE_TWO;
 140:	f0 92 01 01 	sts	0x0101, r15	; 0x800101 <__data_start+0x1>
 144:	e0 92 00 01 	sts	0x0100, r14	; 0x800100 <__data_start>
			_delay_ms(500); 
		}
		else if(mode_flag == MODE_TWO) {
			if(counter < 0) {
				leds = 0; 
				counter = 8;
 148:	c6 2d       	mov	r28, r6
 14a:	d7 2d       	mov	r29, r7
			PORTB = leds; 
			_delay_ms(500); 
		}
		else if(mode_flag == MODE_TWO) {
			if(counter < 0) {
				leds = 0; 
 14c:	0a 2d       	mov	r16, r10
 14e:	1b 2d       	mov	r17, r11
 150:	36 c0       	rjmp	.+108    	; 0x1be <main+0xde>
					mode_flag = MODE_TWO;
					leds = 0;
					counter = -1;  					
				} 
				else { 
					mode_flag = MODE_ONE;
 152:	d0 92 01 01 	sts	0x0101, r13	; 0x800101 <__data_start+0x1>
 156:	c0 92 00 01 	sts	0x0100, r12	; 0x800100 <__data_start>
 15a:	55 c0       	rjmp	.+170    	; 0x206 <main+0x126>
				} 
				
			}
			else {
				//change mode
				mode_flag = MODE_ONE;
 15c:	d0 92 01 01 	sts	0x0101, r13	; 0x800101 <__data_start+0x1>
 160:	c0 92 00 01 	sts	0x0100, r12	; 0x800100 <__data_start>
 164:	50 c0       	rjmp	.+160    	; 0x206 <main+0x126>
				leds = 0;
				counter = 8; 
			}
		}

		if(mode_flag == MODE_ONE) {
 166:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 16a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 16e:	81 30       	cpi	r24, 0x01	; 1
 170:	91 05       	cpc	r25, r1
 172:	e9 f4       	brne	.+58     	; 0x1ae <main+0xce>
			if(counter > 7) {
 174:	c8 30       	cpi	r28, 0x08	; 8
 176:	d1 05       	cpc	r29, r1
 178:	24 f0       	brlt	.+8      	; 0x182 <main+0xa2>
				leds = 0;
				counter = -1;
 17a:	c8 2d       	mov	r28, r8
 17c:	d9 2d       	mov	r29, r9
			}
		}

		if(mode_flag == MODE_ONE) {
			if(counter > 7) {
				leds = 0;
 17e:	0a 2d       	mov	r16, r10
 180:	1b 2d       	mov	r17, r11
				counter = -1;
			}
			SET_BIT(leds, counter++);
 182:	ce 01       	movw	r24, r28
 184:	01 96       	adiw	r24, 0x01	; 1
 186:	96 01       	movw	r18, r12
 188:	02 c0       	rjmp	.+4      	; 0x18e <main+0xae>
 18a:	22 0f       	add	r18, r18
 18c:	33 1f       	adc	r19, r19
 18e:	ca 95       	dec	r28
 190:	e2 f7       	brpl	.-8      	; 0x18a <main+0xaa>
 192:	02 2b       	or	r16, r18
 194:	13 2b       	or	r17, r19
			PORTB = leds; 
 196:	05 b9       	out	0x05, r16	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 198:	2f e9       	ldi	r18, 0x9F	; 159
 19a:	36 e8       	ldi	r19, 0x86	; 134
 19c:	41 e0       	ldi	r20, 0x01	; 1
 19e:	21 50       	subi	r18, 0x01	; 1
 1a0:	30 40       	sbci	r19, 0x00	; 0
 1a2:	40 40       	sbci	r20, 0x00	; 0
 1a4:	e1 f7       	brne	.-8      	; 0x19e <main+0xbe>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <main+0xc8>
 1a8:	00 00       	nop
		if(mode_flag == MODE_ONE) {
			if(counter > 7) {
				leds = 0;
				counter = -1;
			}
			SET_BIT(leds, counter++);
 1aa:	ec 01       	movw	r28, r24
 1ac:	be cf       	rjmp	.-132    	; 0x12a <main+0x4a>
			PORTB = leds; 
			_delay_ms(500); 
		}
		else if(mode_flag == MODE_TWO) {
 1ae:	02 97       	sbiw	r24, 0x02	; 2
 1b0:	e1 f4       	brne	.+56     	; 0x1ea <main+0x10a>
			if(counter < 0) {
 1b2:	dd 23       	and	r29, r29
 1b4:	24 f4       	brge	.+8      	; 0x1be <main+0xde>
				leds = 0; 
				counter = 8;
 1b6:	c6 2d       	mov	r28, r6
 1b8:	d7 2d       	mov	r29, r7
			PORTB = leds; 
			_delay_ms(500); 
		}
		else if(mode_flag == MODE_TWO) {
			if(counter < 0) {
				leds = 0; 
 1ba:	0a 2d       	mov	r16, r10
 1bc:	1b 2d       	mov	r17, r11
				counter = 8;
			}
			SET_BIT(leds, counter--);
 1be:	ce 01       	movw	r24, r28
 1c0:	01 97       	sbiw	r24, 0x01	; 1
 1c2:	96 01       	movw	r18, r12
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <main+0xea>
 1c6:	22 0f       	add	r18, r18
 1c8:	33 1f       	adc	r19, r19
 1ca:	ca 95       	dec	r28
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <main+0xe6>
 1ce:	02 2b       	or	r16, r18
 1d0:	13 2b       	or	r17, r19
			PORTB = leds;
 1d2:	05 b9       	out	0x05, r16	; 5
 1d4:	2f e9       	ldi	r18, 0x9F	; 159
 1d6:	36 e8       	ldi	r19, 0x86	; 134
 1d8:	41 e0       	ldi	r20, 0x01	; 1
 1da:	21 50       	subi	r18, 0x01	; 1
 1dc:	30 40       	sbci	r19, 0x00	; 0
 1de:	40 40       	sbci	r20, 0x00	; 0
 1e0:	e1 f7       	brne	.-8      	; 0x1da <main+0xfa>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <main+0x104>
 1e4:	00 00       	nop
		else if(mode_flag == MODE_TWO) {
			if(counter < 0) {
				leds = 0; 
				counter = 8;
			}
			SET_BIT(leds, counter--);
 1e6:	ec 01       	movw	r28, r24
 1e8:	a0 cf       	rjmp	.-192    	; 0x12a <main+0x4a>
			PORTB = leds;
			_delay_ms(500); 
		}
		else {
			adc_r_8 = adc_read_8_bit(0);
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	0e 94 60 00 	call	0xc0	; 0xc0 <adc_read_8_bit>
			PORTB = adc_r_8;
 1f0:	85 b9       	out	0x05, r24	; 5
 1f2:	8f e9       	ldi	r24, 0x9F	; 159
 1f4:	96 e8       	ldi	r25, 0x86	; 134
 1f6:	21 e0       	ldi	r18, 0x01	; 1
 1f8:	81 50       	subi	r24, 0x01	; 1
 1fa:	90 40       	sbci	r25, 0x00	; 0
 1fc:	20 40       	sbci	r18, 0x00	; 0
 1fe:	e1 f7       	brne	.-8      	; 0x1f8 <main+0x118>
 200:	00 c0       	rjmp	.+0      	; 0x202 <main+0x122>
 202:	00 00       	nop
 204:	92 cf       	rjmp	.-220    	; 0x12a <main+0x4a>
		}

		if(mode_flag == MODE_ONE) {
			if(counter > 7) {
				leds = 0;
				counter = -1;
 206:	c8 2d       	mov	r28, r8
 208:	d9 2d       	mov	r29, r9
			}
		}

		if(mode_flag == MODE_ONE) {
			if(counter > 7) {
				leds = 0;
 20a:	0a 2d       	mov	r16, r10
 20c:	1b 2d       	mov	r17, r11
 20e:	b9 cf       	rjmp	.-142    	; 0x182 <main+0xa2>

00000210 <__vector_1>:
		}
    } // end of while loop 
}

ISR(INT0_vect)
{
 210:	1f 92       	push	r1
 212:	0f 92       	push	r0
 214:	0f b6       	in	r0, 0x3f	; 63
 216:	0f 92       	push	r0
 218:	11 24       	eor	r1, r1
 21a:	2f 93       	push	r18
 21c:	3f 93       	push	r19
 21e:	4f 93       	push	r20
 220:	5f 93       	push	r21
 222:	6f 93       	push	r22
 224:	7f 93       	push	r23
 226:	8f 93       	push	r24
 228:	9f 93       	push	r25
 22a:	af 93       	push	r26
 22c:	bf 93       	push	r27
 22e:	ef 93       	push	r30
 230:	ff 93       	push	r31
	//disable interrupts 
	cli(); 
 232:	f8 94       	cli

	if (mode_flag != MODE_THREE) {
 234:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 238:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 23c:	03 97       	sbiw	r24, 0x03	; 3
 23e:	51 f0       	breq	.+20     	; 0x254 <__vector_1+0x44>
		PORTB = 0; 
 240:	15 b8       	out	0x05, r1	; 5
 242:	2f e9       	ldi	r18, 0x9F	; 159
 244:	86 e8       	ldi	r24, 0x86	; 134
 246:	91 e0       	ldi	r25, 0x01	; 1
 248:	21 50       	subi	r18, 0x01	; 1
 24a:	80 40       	sbci	r24, 0x00	; 0
 24c:	90 40       	sbci	r25, 0x00	; 0
 24e:	e1 f7       	brne	.-8      	; 0x248 <__vector_1+0x38>
 250:	00 c0       	rjmp	.+0      	; 0x252 <__vector_1+0x42>
 252:	00 00       	nop
		_delay_ms(500); 
	}
	
	adc_r_8 = adc_read_8_bit(0);
 254:	80 e0       	ldi	r24, 0x00	; 0
 256:	0e 94 60 00 	call	0xc0	; 0xc0 <adc_read_8_bit>
 25a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
	PORTB = adc_r_8;
 25e:	85 b9       	out	0x05, r24	; 5
 260:	2f e9       	ldi	r18, 0x9F	; 159
 262:	86 e8       	ldi	r24, 0x86	; 134
 264:	91 e0       	ldi	r25, 0x01	; 1
 266:	21 50       	subi	r18, 0x01	; 1
 268:	80 40       	sbci	r24, 0x00	; 0
 26a:	90 40       	sbci	r25, 0x00	; 0
 26c:	e1 f7       	brne	.-8      	; 0x266 <__vector_1+0x56>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <__vector_1+0x60>
 270:	00 00       	nop
	 
	_delay_ms(500); 
	mode_flag = MODE_THREE; 
 272:	83 e0       	ldi	r24, 0x03	; 3
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 27a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	//enable interrupts
	sei(); 
 27e:	78 94       	sei
 280:	ff 91       	pop	r31
 282:	ef 91       	pop	r30
 284:	bf 91       	pop	r27
 286:	af 91       	pop	r26
 288:	9f 91       	pop	r25
 28a:	8f 91       	pop	r24
 28c:	7f 91       	pop	r23
 28e:	6f 91       	pop	r22
 290:	5f 91       	pop	r21
 292:	4f 91       	pop	r20
 294:	3f 91       	pop	r19
 296:	2f 91       	pop	r18
 298:	0f 90       	pop	r0
 29a:	0f be       	out	0x3f, r0	; 63
 29c:	0f 90       	pop	r0
 29e:	1f 90       	pop	r1
 2a0:	18 95       	reti

000002a2 <_exit>:
 2a2:	f8 94       	cli

000002a4 <__stop_program>:
 2a4:	ff cf       	rjmp	.-2      	; 0x2a4 <__stop_program>
